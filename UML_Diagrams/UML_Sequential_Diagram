"plantuml.dotPath": "/opt/homebrew/bin/dot" 
// 'options' + 'D' for rendering
@startuml


actor "User" as User
participant ":ECockpitDashboardActivity" as ECockpit
participant "obd2:OBDII" as OBDII
participant "bluetooth:Bluetooth" as BTDevice
participant "handler:Handler" as Handler


User -> ECockpit: gotoECockpitFragment.setOnClickListener
ECockpit -> BTDevice: bluetooth.connect(macAddress)
ECockpit -> OBDII: initializeConnection()
OBDII -> BTDevice: sendATCommand(atzCommand)
OBDII -> BTDevice: waitForPrompt()
OBDII -> BTDevice: sendATCommand(ate0Command)
OBDII -> BTDevice: waitForPrompt()
OBDII -> BTDevice: sendATCommand(atl0Command)
OBDII -> BTDevice: waitForPrompt()
BTDevice --> ECockpit: Log.i(Bluetooth, "Initialization done");


activate Handler
Handler -> OBDII: handler.post(requestTask)

    ECockpit -> OBDII: startRequestLoop()

loop isRequesting = true
    alt if rpmRequestCount < 4
        OBDII -> BTDevice: sendATCommand(rpmCommand)
        BTDevice -> OBDII: response = waitForPrompt()
        OBDII -> OBDII: processRPMResponse(response)
        OBDII --> OBDII: return String.valueOf(rpm)
        OBDII -> ECockpit: updateRPM(rpm)
        ECockpit -> User: gauge.moveToValue(rpm/100)
        ECockpit -> User: rpmLED(rpm)
    else if rpmRequestCount == 4
        OBDII -> BTDevice: sendATCommand(coolantTempCommand)
        BTDevice -> OBDII: response = waitForPrompt()
        OBDII -> OBDII: processRPMResponse(response)
        OBDII --> OBDII: return String.valueOf(coolantTemp)
        OBDII -> ECockpit: updateCoolantTemp(coolantTemp)
        ECockpit -> User: gaugeProgressBar.setProgress(coolantTemp)
    else if rpmRequestCount == 5
        OBDII -> BTDevice: sendATCommand(intakeAirTempCommand)
        BTDevice -> OBDII: response = waitForPrompt()
        OBDII -> OBDII: porcessIntakeAirTemp(response)
        OBDII --> OBDII: return String.valueOf(intakeAirTemp)
        OBDII -> ECockpit: updateIntakeAirTemp(intakeAirTemp)
        ECockpit -> User: gtxtTemperature.setText(temperature + " Â°C")(intakeAirTemp)
    end
    OBDII -> OBDII: rpmRequestCount = (rpmRequestCount + 1) % 6
    
    alt if !isRequesting
        OBDII -> OBDII: Log Error
        OBDII --> ECockpit: Display "Error retrieving data"
        ECockpit -> Handler: stopRequestLoop()
    end
end

deactivate Handler
@enduml


